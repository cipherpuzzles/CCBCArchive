pid: 22
additional-answers:
- answer: NOT A CUBE
  extra: set part2 unlocked
  message: 原来是图片的拍摄角度误导了你——这颗矿物晶体的形状居然不是正方体，而是另一种多面体... 你还发现，清单上有一些内容刚才被纸盖住了。
- answer: 重置
  extra: clear
  message: 你将桌面恢复了原来的状态
answer: LATITUDE
answer-analysis: "根据题目文本的【正方体晶体】、样本照片、和前两个字母 PY，可以查到图片中的矿物为【黄铁矿 / PYRITE】（也被称为愚人金）。\n\
  \n将矿物的性质填入，用 A=1, B=2, ... 作加减法，提取【备注】部分的字母为 **NOT A CUBE**。\n\n这说明题目中的矿物晶体并不是正方体形状的；同时我们还发现清单有一部分刚才被遮住了——【颜色：深红色】。\n\
  \n这一切都提示着，刚才黄铁矿的判定有误。实际上，有另一种多面体也满足图片中的视角要求：[菱形十二面体](https://mathworld.wolfram.com/RhombicDodecahedron.html)。再结合【深红色】【PY】可以找到正确的矿物名称：【镁铝榴石\
  \ / PYROPE】，一种经常形成菱形十二面体晶体的深红色石榴石品种。\n\n<img src=\"/ccbc15/images/3/6969a6c81cda4163a035da2bd2b8a4f2.webp\"\
  \ alt=\"image\" width=\"50%\" />\n\n重新进行提取，这次得到正确答案 **LATITUDE**. \n\n附两种矿物的性质填写如下：\n\
  \n| 矿物性质 | 答案 #1 | 答案 #2 |\n|----------|----------|----------|\n| **中文名**    | 黄铁矿\
  \ (`PYRITE`)     | 镁铝榴石 (`PYROPE`)     |\n| **词源 (pyr-)**    | 希腊语中火 (`FIRE`) 的意思\
  \     | 希腊语中火 (`FIRE`) 的意思 |\n| **晶系**    | 立方晶系 (`CUBIC`)     | 立方晶系 (`CUBIC`)\
  \     |\n| **晶体形状**    | 正方体 (`CUBE`)     | 菱形十二面体 (`RHOMBIC DODECAHEDRON`)    \
  \ |\n| **化学式** | FeS₂ | Mg₃Al₂Si₃O₁₂ |\n| **化学式中有几个原子** | `3` | `20` |\n| **化学式中有几种元素**\
  \ | `2` | `4` |\n| **莫氏硬度** | `6` | `7` |\n| **划痕颜色** | 黑色 (`BLACK`) | 白色 (`WHITE`)\
  \ | \n| **比重** | `5` | `4` |\n| **被误认为一种名贵珠宝材料** | 黄金 (`GOLD`) | 红宝石 (`RUBY`) |\n\
  \n实际上，本题标题中的“火眼”指的是镁铝榴石的词源 pyr(火) + ope(眼)，“金晶”指的是“愚人金”黄铁矿。"
content:
- '一张未填完的资料清单，图上好像是一种呈正方体晶体的矿物。

  '
content-type: 2
desc: ''
extend-data: ''
links:
- path: ccbc15/index
  title: 索引页
  type: index
- path: ccbc15/pages/c
  title: 科学的深入浅出
  type: page
tips:
- content: 风味文本提到的“正方体”、矿物图片、首两个字母"PY"共同指向了一种矿物，接下来将该矿物的性质填入清单中。
  title: 我毫无头绪
- content: 在【备注】中按A=1, B=2, ...对读出的字母（或数字）进行运算，最后按A=1, B=2, ...转回字母。
  title: 该如何提取
title: 火眼金晶
type: problem
vue_script: "const { ref, inject, onMounted } = Vue;\r\n\r\nexport default {\r\n \
  \   setup() {\r\n        const loaded = ref(false);\r\n        const imgsrc = ref(\"\
  \");\r\n        const backend = inject(\"backend\");\r\n\r\n        const processBackend\
  \ = async () => {\r\n            let data = await backend(\"c15-c12-8\", {});\r\n\
  \            imgsrc.value = data.img;\r\n            loaded.value = true;\r\n  \
  \      }\r\n\r\n        onMounted(() => {\r\n            processBackend();\r\n \
  \       });\r\n\r\n        //所有在页面上使用的对象，都需要这里return出去\r\n        return {\r\n \
  \           loaded,\r\n            imgsrc\r\n        }\r\n    }\r\n}"
vue_template: "<template>\r\n    <div>\r\n        <div v-if=\"loaded\">\r\n      \
  \      <img :src=\"imgsrc\" style=\"width: 800px\" />\r\n        </div>\r\n    \
  \    <div v-else>图像加载中...</div>\r\n        <div style=\"height: 170px\"></div>\r\
  \n    </div>\r\n</template>\r\n\r\n<data>\r\n    {\r\n        \"part1\": \"/ccbc15/images/3/1af987f9f5bd49179d36884b43afc0df.webp\"\
  ,\r\n        \"part2\": \"/ccbc15/images/3/aa2a39f2f9394fb08233b40eaf9a72bf.webp\"\
  \r\n    }\r\n</data>"
