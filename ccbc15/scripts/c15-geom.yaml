content:
- 服务器脚本 c15-geom 三区户外题后端
key: c15-geom
psid: 8
script: |
  // 提交频率限制在每个用户每分钟一次
  const LIMIT = 60 * 1000;

  // 检查周围范围为 100
  const AROUND_RANGE = 100;

  const COLORS = [
      ["#FF5245", "#FF4420", "#FF6973", "#FF2065", "#FF7665", "#FF7279", "#FF7768", "#FF6572", "#FF6520", "#FF424C", "#FF5545", "#FF2069", "#FF7320", "#FF7761", "#FF7465", "#FF7220", "#FF7265", "#FF6C61", "#FF7465", "#FF6420", "#FF4752", "#FF4545", "#FF4E20", "#FF6973", "#FF2076", "#FF6567", "#FF6574", "#FF6174", "#FF696F", "#FF6E20", "#FF474F", "#FF2121"],
      ["#4120FF", "#7375FF", "#7267FF", "#6963FF", "#616CFF", "#2070FF", "#726FFF", "#6365FF", "#6475FF", "#7265FF", "#2074FF", "#6861FF", "#7420FF", "#696EFF", "#766FFF", "#6C76FF", "#6573FF", "#2063FF", "#7574FF", "#7469FF", "#6E67FF", "#2061FF", "#6E64FF", "#2072FF", "#6561FF", "#6C69FF", "#676EFF", "#696EFF", "#6720FF", "#626FFF", "#6E65FF", "#7320FF"],
      ["#74FF6F", "#20FF63", "#6FFF72", "#72FF65", "#63FF74", "#20FF64", "#65FF66", "#6FFF72", "#6DFF69", "#74FF69", "#65FF73", "#2CFF20", "#72FF65", "#6CFF69", "#65FF76", "#65FF20", "#70FF61", "#69FF6E", "#2CFF20", "#6FFF72", "#20FF69", "#6DFF70", "#72FF6F", "#76FF65", "#20FF6A", "#6FFF69", "#6EFF74", "#20FF66", "#75FF6E", "#63FF74", "#69FF6F", "#6EFF2E"],
  ]

  // ====================   copy from node-geohash ====================
  var BASE32_CODES = "0123456789bcdefghjkmnpqrstuvwxyz";
  var BASE32_CODES_DICT = {};
  for (var i = 0; i < BASE32_CODES.length; i++) {
      BASE32_CODES_DICT[BASE32_CODES.charAt(i)] = i;
  }

  var ENCODE_AUTO = 'auto';

  var MIN_LAT = -90;
  var MAX_LAT = 90;
  var MIN_LON = -180;
  var MAX_LON = 180;
  /**
  * Significant Figure Hash Length
  *
  * This is a quick and dirty lookup to figure out how long our hash
  * should be in order to guarantee a certain amount of trailing
  * significant figures. This was calculated by determining the error:
  * 45/2^(n-1) where n is the number of bits for a latitude or
  * longitude. Key is # of desired sig figs, value is minimum length of
  * the geohash.
  * @type Array
  */
  // Desired sig figs:  0  1  2  3  4   5   6   7   8   9  10
  var SIGFIG_HASH_LENGTH = [0, 5, 7, 8, 11, 12, 13, 15, 16, 17, 18];
  /**
  * Encode
  *
  * Create a Geohash out of a latitude and longitude that is
  * `numberOfChars` long.
  *
  * @param {Number|String} latitude
  * @param {Number|String} longitude
  * @param {Number} numberOfChars
  * @returns {String}
  */
  const encodeGeoHash = function (latitude, longitude, numberOfChars) {
      if (numberOfChars === ENCODE_AUTO) {
          if (typeof (latitude) === 'number' || typeof (longitude) === 'number') {
              throw new Error('string notation required for auto precision.');
          }
          var decSigFigsLat = latitude.split('.')[1].length;
          var decSigFigsLong = longitude.split('.')[1].length;
          var numberOfSigFigs = Math.max(decSigFigsLat, decSigFigsLong);
          numberOfChars = SIGFIG_HASH_LENGTH[numberOfSigFigs];
      } else if (numberOfChars === undefined) {
          numberOfChars = 9;
      }

      var chars = [],
          bits = 0,
          bitsTotal = 0,
          hash_value = 0,
          maxLat = MAX_LAT,
          minLat = MIN_LAT,
          maxLon = MAX_LON,
          minLon = MIN_LON,
          mid;
      while (chars.length < numberOfChars) {
          if (bitsTotal % 2 === 0) {
              mid = (maxLon + minLon) / 2;
              if (longitude > mid) {
                  hash_value = (hash_value << 1) + 1;
                  minLon = mid;
              } else {
                  hash_value = (hash_value << 1) + 0;
                  maxLon = mid;
              }
          } else {
              mid = (maxLat + minLat) / 2;
              if (latitude > mid) {
                  hash_value = (hash_value << 1) + 1;
                  minLat = mid;
              } else {
                  hash_value = (hash_value << 1) + 0;
                  maxLat = mid;
              }
          }

          bits++;
          bitsTotal++;
          if (bits === 5) {
              var code = BASE32_CODES[hash_value];
              chars.push(code);
              bits = 0;
              hash_value = 0;
          }
      }
      return chars.join('');
  };
  // ==================== end ====================


  // ==================== openstreetmap ====================
  async function api(query) {
      let formData = { 'data': query };
      let responseStr = await ctx.httpPostForm("https://overpass-api.de/api/interpreter", formData, {});
      // let responseStr = await ctx.httpPostForm("https://overpass.private.coffee/api/interpreter", formData, {});
      return responseStr;
  }

  async function apiQuery(lat, lon) {
      const query = `[out:json];
      (
          nwr["natural"~"coastline|water|wetland|wood|grassland|heath|scrub|tree|tree_row"](around:${AROUND_RANGE}, ${lat}, ${lon});
          nwr["landuse"~"reservoir|basin|salt_pond|allotments|farmland|farmyard|flowerbed|forest|greenhouse_horticulture|meadow|orchard|plant_nursery|vineyard|grass"](around:${AROUND_RANGE}, ${lat}, ${lon});
          is_in(${lat}, ${lon});
      );
      out tags;`;
      let water = false;
      let forest = false;
      // return { water, forest };
      let apiQueryResult = await api(query);
      const data = JSON.parse(apiQueryResult);
      for (let i = data.elements.length - 1; i >= 0; i--) {
          const element = data.elements[i];
          if (element.tags) {
              if (element.tags.natural && ['water', 'coastline', 'wetland', 'bay', 'strait'].includes(element.tags.natural)) {
                  water = true;
              }
              if (element.tags.landuse && ['reservoir', 'basin', 'salt_pond'].includes(element.tags.landuse)) {
                  water = true;
              }
              if (element.tags.natural && ['wood', 'grassland', 'heath', 'scrub', 'tree', 'tree_row'].includes(element.tags.natural)) {
                  forest = true;
              }
              if (element.tags.landuse && ['allotments', 'farmland', 'farmyard', 'flowerbed', 'forest', 'greenhouse_horticulture', 'meadow', 'orchard', 'plant_nursery', 'vineyard', 'grass'].includes(element.tags.landuse)) {
                  forest = true;
              }
          }
      }
      return { water, forest };
  }
  // ==================== end ====================

  // 将字符串转换为数字并计算哈希值
  function hash2int(str, mod) {
      let hash = 0;
      for (let i = 0; i < str.length; i++) {
          hash = (hash * 32 + BASE32_CODES_DICT[str[i]]) % mod;
      }
      return hash * 107 % mod % COLORS[0].length;
  }

  function getUser(ctx) {
      const varName = `GeoPuzzle_Team${ctx.gid}`;
      let user = ctx.getStorage(varName);
      if (user) {
          user = JSON.parse(user);
      }
      if (!user) {
          user = {
              data: [
                  Array(32).fill(false),
                  Array(32).fill(false),
                  Array(32).fill(false)
              ],
              timestamp: 0
          };
          ctx.setStorage(varName, JSON.stringify(user));
      }
      return user;
  }

  function setUser(ctx, user) {
      const varName = `GeoPuzzle_Team${ctx.gid}`;
      ctx.setStorage(varName, JSON.stringify(user));
  }

  function addLog(data) {
      let logs = ctx.getStorage("GeoPuzzleLogs");
      if (logs) {
          logs = JSON.parse(logs);
      } else {
          logs = [];
      }
      logs.push(data);
      ctx.setStorage("GeoPuzzleLogs", JSON.stringify(logs));
  }

  function query(ctx) {
      const user = getUser(ctx);
      // TRUE 的话取对应的颜色，FALSE 的话取灰色 #808080
      const colors = user.data.map(function (row, i) {
          return row.map(function (cell, j) {
              return cell ? COLORS[i][j] : "#808080";
          });
      });
      const count = user.data.reduce(function (acc, row) {
          return acc + row.reduce(function (acc, cell) {
              return acc + (cell ? 1 : 0);
          }, 0);
        }, 0)
      if (count == 32 * 3) {
          return {
              status: "ok",
              color: colors,
              temp_msg: "恭喜你刮开了所有的格子！这里是一张兑奖券，你可以拿着这张兑奖券通过站内信向 Nano 领取奖品！（仅限比赛时有效）",
          }
      }
      return {
          status: "ok",
          color: colors
      }
  }

  async function summit(ctx, request) {
      let user = getUser(ctx);
      // 检查提交频率
      const timestamp = Date.now();
      if (timestamp - user.timestamp < LIMIT) {
          const colors = user.data.map(function (row, i) {
              return row.map(function (cell, j) {
                  return cell ? COLORS[i][j] : "#808080";
              });
          });
          return {
              status: "ok",
              color: colors
          }
      }
      user.timestamp = timestamp;
      // 计算提交的 GeoHash
      const latitude = request.latitude;
      const longitude = request.longitude;
      const geoHash = encodeGeoHash(latitude, longitude, 7); // 范围 100m
      let red = hash2int(geoHash, 10007);
      let blue = hash2int(geoHash, 10009);
      let green = hash2int(geoHash, 10037);
      // red: 默认都为 true
      user.data[0][red] = true;
      // 在请求 api 之前先更新用户数据
      setUser(ctx, user);
      const apiQueryResult = await apiQuery(latitude, longitude);
      // blue: 检查是否在水周围或者在水中
      if (apiQueryResult.water)   {
          user.data[1][blue] = true;
      } else { blue = -1; }
      // green: 检查是否在森林周围或者在森林中
      if (apiQueryResult.forest) {
          user.data[2][green] = true;
      } else { green = -1; }
      // 再次更新用户数据
      setUser(ctx, user);
      // 把 geoHash, red, blue, green 添加进日志
      addLog([(new Date()).toISOString(), ctx.gid, ctx.uid, geoHash, red, blue, green]);
      const colors = user.data.map(function (row, i) {
          return row.map(function (cell, j) {
              return cell ? COLORS[i][j] : "#808080";
          });
      });
      return {
          status: "ok",
          color: colors,
          // geoHash, // DEBUG
          // red, // DEBUG
          // blue, // DEBUG
          // green, // DEBUG
      }
  }


  function getLog(ctx, request) {
      if (ctx.uid !== 164) {
          return {
              status: "error",
              msg: "对不起，你没有权限，因为你不是 Nano（察觉"
          }
      }
      let logs = ctx.getStorage("GeoPuzzleLogs");
      if (logs) {
          logs = JSON.parse(logs);
      } else {
          logs = [];
      }
      // 筛选出第二列为 request.id 的日志，查询队伍日志
      return {
          status: "ok",
          logs: logs.filter(function (log) {
              return log[1] === request.id;
          })
      };
  }

  function getAllLog(ctx) {
      if (ctx.uid !== 164) {
          return {
              status: "error",
              msg: "对不起，你没有权限，因为你不是 Nano（察觉"  
          }
      }
      let logs = ctx.getStorage("GeoPuzzleLogs");
      if (logs) {
          logs = JSON.parse(logs);
      } else {
          logs = [];
      }
      return {
          status: "ok",
          logs
      }
  }

  function resetAllLog(ctx) {
      if (ctx.uid !== 164) {
          return {
              status: "error",
              msg: "对不起，你没有权限，因为你不是 Nano（察觉"
          }
      }
      ctx.setStorage("GeoPuzzleLogs", "[]");
      return {
          status: "ok",
          msg: "日志已清空"
      }
  }

  async function debug(ctx, request) {
      if (ctx.uid !== 164) {
            return {
              status: "error",
              msg: "对不起，你没有权限，因为你不是 Nano（察觉"
          }
      }
      const lat = 30.27605, lon = 120.16817;
      const query = `[out:json];
      (
          nwr["natural"~"coastline|water|wetland|wood|grassland|heath|scrub|tree|tree_row"](around:${AROUND_RANGE}, ${lat}, ${lon});
          nwr["landuse"~"reservoir|basin|salt_pond|allotments|farmland|farmyard|flowerbed|forest|greenhouse_horticulture|meadow|orchard|plant_nursery|vineyard|grass"](around:${AROUND_RANGE}, ${lat}, ${lon});
          is_in(${lat}, ${lon});
      );
      out tags;`;
      return {
          status: "ok",
          data: await api(query)
      }
  }

  async function main(ctx, request) {
      if (!request.type) {
          return {
              status: "error",
              msg: "请求格式不正确：type 字段为空"
          }
      }
      if (request.type === "query") {
          return query(ctx);
      } else if (request.type === "summit") {
          return await summit(ctx, request);
      } else if (request.type === "getLog") {
          return getLog(ctx, request);
      } else if (request.type === "getAllLog") {
          return getAllLog(ctx);
      } else if (request.type === "resetAllLog") {
          return resetAllLog(ctx);
      } else if (request.type === "debug") {
          return await debug(ctx, request);
      } else {
          return {
              status: "error",
              msg: `请求格式不正确：未知的 type 值 ${request.type}`
          }
      }
  }


  // ======= 以下是 JSON 解析与调用脚本，一般不需要修改 ========
  async function _jsonProcessHelper(ctx) {
      let request = JSON.parse(ctx.request);
      let resBody = await main(ctx, request);
      let resString = JSON.stringify(resBody);
      ctx.response(resString);
  }

  await _jsonProcessHelper(ctx);

title: 三区户外题后端
type: backend_script
