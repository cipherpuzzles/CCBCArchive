additional-answers:
- answer: '79'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '1817322052863854108'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '9050306937430873354364'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '2361183241434822606847'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '193144'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '127'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '9444732965739290427390'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '11887954948017136050930299852901473663961901201030041775'
  extra: ''
  message: 这是本题小题答案之一。
- answer: '2008050114192305180919031513161205240915140000000000007878181271875549796204412037303617764170997561381438280089880355517414381177376052846200'
  extra: ''
  message: 这是本题的中间答案。
answer: COMPLEXION
answer-analysis: '# 概要


  观察到前面的注释部分分为8个小题，每个部分以一定的规则迭代。联系标题可以想到每个部分是循环的，本题的核心即为求出这个程序的循环节。


  考虑到8个小题是独立的，因此我们可以分别计算出每部分的循环节，然后求出最小公倍数，即为整个程序的循环节。


  | 编号 | 规则 | 计算方法 | 循环节 |

  | --- | --- | --- | --- |

  | 0 | 图像位移 | 观察 | 79 |

  | 1 | 加一 | 直接计算 | 11887954948017136050930299852901473663961901201030041775 |

  | 2 | 乘二 | 数学 | 1817322052863854108 |

  | 3 | 斐波那契 | 数学 | 9050306937430873354364 |

  | 4 | 线性反馈移位寄存器 | 数学 | 2361183241434822606847 |

  | 5 | 元胞自动机 | 编程 | 193144 |

  | 6 | 生命游戏 | 观察 | 127 |

  | 7 | 图灵机 | 数学 | 9444732965739290427390 |


  最小公倍数的计算可以使用 Wolfram Alpha、SageMath、Python 或其他工具。例如，在 Wolfram Alpha 里输入 ```lcm(...)```，其中
  ```...``` 是小题答案（以逗号分隔），即可得到答案。


  求出最小公倍数，得到 2008050114192305180919031513161205240915140000000000007878181271875549796204412037303617764170997561381438280089880355517414381177376052846200。注意到这个数中间有一串连续的0。将前缀通过
  A1Z26 翻译后得到 ```THE ANSWER IS COMPLEXION```。本题答案即为 ```COMPLEXION```。



  # 小题

  ## 0

  图上有三只鸟，其中一只每步向左移一格，剩余两只每步向右移一格。循环节为图像的宽度，即79。


  ## 1

  数字每步加一之后对 $n = 11887954948017136050930299852901473663961901201030041775$ 取模。循环节即为
  n。


  ## 2

  数字每一步乘二后对 $n = 8123429576491463905379$ 取模。循环节即为2在乘法群 $Z_n^{\times}$ 中的order。有多种方法可以计算这个值。

  * 在 Wolfram Alpha 中输入 ```multiplicative order of 2 mod 8123429576491463905379```
  可以直接得到答案。

  * 在 SageMath 中输入 ```Mod(2, 8123429576491463905379).multiplicative_order()``` 可以直接得到答案。

  * 注意到 $n = pq$，其中 $p = 64934889871$，$q = 125101152749$，因此可以对 p 和 q 分别求循环节后取最小公倍数。注意到两个数都不太大，因此可以用
  Baby-step giant-step 等算法求出循环节。


  ## 3

  数字为斐波那契数列模 $n = 864304312523718725659009$ 的值。斐波那契数列在模意义下的循环节被称为 Pisano Period。计算方法如下（证明略）：

  1. 注意到 $n = p^2$ 其中 $p = 929679682753$，因此答案为 斐波那契数列模 p 的循环节 乘 p。因此只需要求出斐波那契数列模 p
  的循环节。

  2. 注意到 5 模 p 非二次剩余。因此模 p 的循环节为 $2p+2$ 的因数。枚举所有因数之后得到正确的循环节。


  ## 4

  本小题是一个线性反馈移位寄存器 (Linear-feedback shift register)。其回授多项式 (feedback polynomial)为 $x^{71}+x^{53}+1$。注意到这个多项式在有限域
  $\mathbb{F}_2$ 上是本原多项式 (primitive polynomial)，因此循环节即为 $2^{71}-1$。


  如果没有注意到这个多项式是本原多项式，则可以通过枚举 $2^{71}-1$ 的因数得到答案。


  ## 5

  本小题是一个一维元胞自动机 (Cellular automaton)。其 Wolfram 代码 (Wolfram code) 为 Rule 73。

  其变换规则为 ```111→0 110→1 101→0 100→0 011→1 010→0 001→0 000→1```。通过编程模拟可以得到答案。


  ## 6

  本小题为生命游戏，编程或使用在线模拟器（如 [链接](http://copy.sh/life/)）可以观察到循环节为 127。


  此外，本小题实际上是一个有名的局面，被称为 [74P127](https://conwaylife.com/wiki/74P127)。


  ## 7

  本小题是一个简单的图灵机，实现了一个二进制的计数器。在每一步，如果当前指针指向的数字为0，则将其改为1，并将指针不断移动到右端点；如果当前指针指向的数字为1，则将其改成0，并令指针向左一格。


  本小题中计数器的长度为 71 个bit（去除两端的2之后）。若计数器长度为 n 个bit，则循环节为 $2^{n+2}-2$ （下文将介绍计算方法）。代入即可得到答案。


  有多种方法可以得到本小题的循环节公式。

  * 手动实现一个较小的计数器，计算出循环节后找规律。

  * 从 x 增加到 x+1 的过程中，如果 x 的二进制末尾有 k 个 1，则需要进行 $2k+2$ 步。考虑到二进制末尾有至少 k 个 1的数有 $2^{n-k}$个，因此答案即为
  $2 \sum_{0\le k\le n} 2^{n-k} = 2^{n+2}-2$。

  '
content:
- '*题目虐我千百遍，我待题目如初见。*


  请运行以下 Ruby 程序：[链接](https://static.cipherpuzzles.com/static/images/b901f12e05e54f6f84fab85a717872b6.rb)。


  建议使用 Ruby 2.7 或更新的版本。正常运行时不应出现报错。如果遇到运行问题，可以使用在线工具，例如：<a href="https://c.runoob.com/compile/13/"
  target="_blank">链接</a>。


  本题有小题答案验证。'
content-type: 0
desc: 面色
extend-data: 6,5,8,8
links:
- path: ccbc13/index
  title: 索引页
  type: index
- path: ccbc13/pages/ccbc14
  title: CCBC-14
  type: page
tips:
- content: '请于[链接](https://static.cipherpuzzles.com/static/images/099c859e793340cdab608945ca283a5f.zip)下载。

    ```0.rb```是初始的程序，对于```x```从```0```到```199```，```x+1.rb```是```x.rb```的运行结果。'
  title: 我没有条件运行程序。请给我运行结果。
- content: 你可能已经注意到了，这段程序的输出与自身有些相似，但前面的注释部分发生了改变。试着分析每个变换的规律吧。
  title: 我毫无头绪
- content: 什么时候可以重新看到初始状态。也就是，求出这些变换的周期。
  title: 标题是什么意思？
- content: 这是一个长度为71的线性反馈移位寄存器（Linear feedback shift register），它每一步将标出的两位异或后置于字符串最前面，并删除最后一位。可以搜索一下LFSR的数学背景。
  title: 小题4的机制是？
- content: '这是一个一维的元胞自动机， 它的规则可以写为

    ```111→0 110→1 101→0 100→0 011→1 010→0 001→0 000→1```'
  title: 小题5的机制是？
- content: 这是康威生命游戏。可以搜索一下相关的模拟器或者编程。可以使用 http://copy.sh/life/ 进行模拟。
  title: 小题6的机制是？
- content: 这是一个3符号2状态的图灵机，并给出了状态转移表。这个图灵机实现了一个二进制的计数器。
  title: 小题7的机制是？
- content: 你需要计算整个程序的周期，即所有小题答案的最小公倍数。这一步可以使用 Wolfram Alpha、SageMath、Python 或其他工具。
  title: 我已得到所有小题答案，如何进行下一步？
- content: 这个中间答案中间有一长串0。只看这一串前面的部分，数字两两分组转字母。
  title: 我得到中间答案了，接下来怎么做？
- content: '79'
  title: 小题0的答案是？
- content: '11887954948017136050930299852901473663961901201030041775'
  title: 小题1的答案是？
- content: '1817322052863854108'
  title: 小题2的答案是？
- content: '9050306937430873354364'
  title: 小题3的答案是？
- content: '2361183241434822606847'
  title: 小题4的答案是？
- content: '193144'
  title: 小题5的答案是？
- content: '127'
  title: 小题6的答案是？
- content: '9444732965739290427390'
  title: 小题7的答案是？
title: 何日君再来
type: problem
